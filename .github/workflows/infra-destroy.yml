name: Manual Infrastructure Destroy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod

# Add environment variables for consistency
env:
  TF_VERSION: "1.8.5"
  AWS_REGION: "us-east-1"

jobs:
  plan-destroy:
    name: Plan Terraform Destroy
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for OIDC
      contents: read  # Required to checkout the code
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        id: init
        run: |
          echo "🔧 Initializing Terraform with S3 backend..."
          terraform init -input=false
          echo "✅ Terraform initialized successfully"
        working-directory: Weather-dashboard-API/infra/environments/${{ github.event.inputs.environment }}

      - name: Debug Current State
        run: |
          echo "📋 Current Terraform State:"
          terraform state list || echo "No state found"
          echo ""
          echo "📁 Working directory contents:"
          ls -la
          echo ""
          echo "🔧 Terraform workspace:"
          terraform workspace show
          echo ""
          echo "🗂️ Backend configuration:"
          terraform version
        working-directory: Weather-dashboard-API/infra/environments/${{ github.event.inputs.environment }}

      - name: Terraform Plan Destroy
        id: plan-destroy
        run: |
          echo "📋 Planning destruction for ${{ github.event.inputs.environment }}..."
          echo "⚠️  Creating fresh destroy plan based on current state"
          echo "ℹ️  This ensures we destroy exactly what exists now, not what was planned for creation"
          terraform plan -destroy -input=false -no-color -out=destroy-plan.tfplan
          echo "✅ Destroy plan completed successfully"
        working-directory: Weather-dashboard-API/infra/environments/${{ github.event.inputs.environment }}
        env:
          TF_VAR_bastion_public_key: ${{ secrets.BASTION_PUBLIC_KEY }}
          TF_VAR_bastion_allowed_cidr_blocks: ${{ secrets.LOCAL_IP }}

      - name: Debug Plan File
        run: |
          echo "📁 Plan file created:"
          ls -la destroy-plan.tfplan
          echo "📏 Plan file size: $(du -h destroy-plan.tfplan)"
        working-directory: Weather-dashboard-API/infra/environments/${{ github.event.inputs.environment }}

      - name: Upload Destroy Plan
        uses: actions/upload-artifact@v4
        with:
          name: destroy-plan-${{ github.event.inputs.environment }}-${{ github.run_number }}
          path: Weather-dashboard-API/infra/environments/${{ github.event.inputs.environment }}/destroy-plan.tfplan
          retention-days: 1

  apply-destroy:
    name: Apply Terraform Destroy
    runs-on: ubuntu-latest
    needs: plan-destroy
    permissions:
      id-token: write # Required for OIDC
      contents: read  # Required to checkout the code
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          echo "🔧 Initializing Terraform with S3 backend..."
          terraform init -input=false
          echo "✅ Terraform initialized successfully"
        working-directory: Weather-dashboard-API/infra/environments/${{ github.event.inputs.environment }}

      - name: Download Destroy Plan
        uses: actions/download-artifact@v4
        with:
          name: destroy-plan-${{ github.event.inputs.environment }}-${{ github.run_number }}
          path: Weather-dashboard-API/infra/environments/${{ github.event.inputs.environment }}

      - name: Verify Destroy Plan File
        run: |
          echo "📁 Downloaded files:"
          ls -la
          if [ -f destroy-plan.tfplan ]; then
            echo "✅ Destroy plan file found"
            echo "📏 Plan file size: $(du -h destroy-plan.tfplan)"
          else
            echo "❌ Destroy plan file not found"
            echo "Contents of directory:"
            find . -name "*plan*" -type f
            exit 1
          fi
        working-directory: Weather-dashboard-API/infra/environments/${{ github.event.inputs.environment }}

      - name: Terraform Apply Destroy Plan
        id: destroy
        run: |
          echo "🗑️ Applying destroy plan for ${{ github.event.inputs.environment }}..."
          terraform apply -auto-approve destroy-plan.tfplan
          echo "✅ Destruction completed successfully"
        working-directory: Weather-dashboard-API/infra/environments/${{ github.event.inputs.environment }}

      - name: Verify Destruction
        run: |
          echo "📋 Final state verification:"
          terraform state list || echo "✅ No resources remaining in state - infrastructure successfully destroyed"
        working-directory: Weather-dashboard-API/infra/environments/${{ github.event.inputs.environment }}
