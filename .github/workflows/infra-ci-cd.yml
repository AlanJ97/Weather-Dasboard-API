name: Infrastructure CI

on:
  push:
    branches:
      - develop
    paths:
      - 'Weather-dashboard-API/infra/**'
      - '.github/workflows/infra-ci-cd.yml'
  pull_request:
    types: [opened, synchronize, closed]
    branches:
      - develop
    paths:
      - 'Weather-dashboard-API/infra/**'

# Add environment variables for better configuration management
env:
  TF_VERSION: "1.8.5"
  AWS_REGION: "us-east-1"
  WORKING_DIR: "./Weather-dashboard-API/infra/environments/dev"
  INFRA_DIR: "./Weather-dashboard-API/infra"

jobs:
  validate-terraform:
    name: 'Validate Terraform'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    # Add timeout to prevent hanging builds
    timeout-minutes: 15

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 'Terraform Init'
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}

      - name: 'Terraform Format'
        run: terraform fmt -check
        working-directory: ${{ env.INFRA_DIR }}

      - name: 'Terraform Validate'
        run: terraform validate
        working-directory: ${{ env.WORKING_DIR }}

      - name: 'Run Checkov Security Scan'
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ${{ env.INFRA_DIR }}
          framework: terraform
          skip_check: CKV_AWS_130,CKV_AWS_338,CKV_AWS_158,CKV_AWS_136,CKV_AWS_260,CKV_AWS_150,CKV_AWS_131,CKV_AWS_91,CKV2_AWS_20,CKV2_AWS_28,CKV_AWS_103,CKV_AWS_378,CKV_AWS_126,CKV_AWS_135,CKV_AWS_382

      - name: Display Skipped Security Checks
        run: |
          echo "‚ÑπÔ∏è  The following Checkov security checks were intentionally skipped:"
          echo "   ‚Ä¢ CKV_AWS_130: Public subnets auto-assign public IPs (required for public subnets)"
          echo "   ‚Ä¢ CKV_AWS_338: CloudWatch log retention < 1 year (7 days is sufficient for dev/testing)"
          echo "   ‚Ä¢ CKV_AWS_158: Additional security check (deferred for this iteration)"
          echo "   ‚Ä¢ CKV_AWS_136: Askes the user to use KMS to encrypt ECR repositories"
          echo "   ‚Ä¢ CKV_AWS_260: ALB requires port 80 for HTTP to HTTPS redirection, which is a standard secure practice."
          echo "   ‚Ä¢ CKV_AWS_150: ALB requires to have enabled the deletion protection to avoid accidental deletion, which is a standard secure practice."
          echo "   ‚Ä¢ CKV_AWS_91: ALB requires to have access logs enabled"
          echo "   ‚Ä¢ CKV_AWS_131: ALB requires to have the logs enables"
          echo "   ‚Ä¢ CKV2_AWS_20: Ensure that ALB redirects HTTP requests into HTTPS ones"
          echo "   ‚Ä¢ CKV2_AWS_28: Ensure public facing ALB are protected by WA"
          echo "   ‚Ä¢ CKV_AWS_103: Ensure that load balancer is using at least TLS 1.2"
          echo "   ‚Ä¢ CKV_AWS_378: Ensure AWS Load Balancer doesnt use HTTP protocol"
          echo "   ‚Ä¢ CKV_AWS_126: Ensure that detailed monitoring is enabled for EC2 instances"
          echo "   ‚Ä¢ CKV_AWS_135: Ensure that EC2 is EBS optimized"
          echo "   ‚Ä¢ CKV_AWS_382: Ensure no security groups allow egress from 0.0.0.0:0 to port -1"
      
      - name: Terraform Plan (Dev)
        id: plan-dev
        run: |
          echo "Starting Terraform plan..."
          terraform plan -input=false -no-color -out=tfplan
          echo "Terraform plan completed successfully"
        working-directory: ${{ env.WORKING_DIR }}
        env:
          TF_VAR_bastion_public_key: ${{ secrets.BASTION_PUBLIC_KEY }}
          TF_VAR_bastion_allowed_cidr_blocks: ${{ secrets.LOCAL_IP }}

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: tfplan-dev
          path: ${{ env.WORKING_DIR }}/tfplan
          retention-days: 1

      # Add failure notification
      - name: 'Notify on Failure'
        if: failure()
        run: |
          echo "üö® Infrastructure validation failed!"
          echo "Please check the logs above and fix any issues before merging."
          echo "Common issues:"
          echo "  ‚Ä¢ Terraform formatting errors"
          echo "  ‚Ä¢ Security policy violations"
          echo "  ‚Ä¢ Invalid Terraform configuration"
          exit 1

  deploy-infra:
    name: 'Deploy infra with Terraform to AWS'
    runs-on: ubuntu-latest
    needs: validate-terraform
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.base_ref == 'develop'
    permissions:
      id-token: write
      contents: read
    
    # Add timeout for deployment
    timeout-minutes: 30

    steps:
      - name: 'Deploy Context'
        run: |
          echo "üöÄ Deploying to AWS after PR merge to develop"
          echo "Event: ${{ github.event_name }}"
          echo "PR Action: ${{ github.event.action }}"
          echo "PR Merged: ${{ github.event.pull_request.merged }}"
          echo "Base Branch: ${{ github.base_ref }}"
          echo "Validation result: ${{ needs.validate-terraform.result }}"
      
      - name: 'Checkout'
        uses: actions/checkout@v3

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-dev
          path: ${{ env.WORKING_DIR }}

      - name: Verify Plan File
        run: |
          echo "Checking if plan file exists..."
          ls -la ${{ env.WORKING_DIR }}/
          if [ -f ${{ env.WORKING_DIR }}/tfplan ]; then
            echo "‚úÖ Plan file found"
          else
            echo "‚ùå Plan file not found"
            exit 1
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 'Terraform Init'
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}

      - name: 'Terraform Apply'
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ env.WORKING_DIR }}
        env:
          TF_VAR_bastion_public_key: ${{ secrets.BASTION_PUBLIC_KEY }}
          TF_VAR_bastion_allowed_cidr_blocks: ${{ secrets.LOCAL_IP }}

      # Add post-deployment verification
      - name: 'Post-Deployment Verification'
        run: |
          echo "üîç Verifying deployment..."
          terraform show -json tfplan > /dev/null
          echo "‚úÖ Deployment verification completed"
        working-directory: ${{ env.WORKING_DIR }}

      # Add success notification
      - name: 'Notify on Success'
        if: success()
        run: |
          echo "üéâ Infrastructure deployment successful!"
          echo "Environment: dev"
          echo "Commit SHA: ${{ github.sha }}"
          echo "PR: ${{ github.event.pull_request.html_url }}"

      # Add failure notification with rollback guidance
      - name: 'Notify on Failure'
        if: failure()
        run: |
          echo "üö® Infrastructure deployment failed!"
          echo "Please check the logs above and consider:"
          echo "  ‚Ä¢ Rolling back changes if needed"
          echo "  ‚Ä¢ Verifying AWS permissions"
          echo "  ‚Ä¢ Checking resource limits"
          echo "  ‚Ä¢ Reviewing Terraform state"
          exit 1