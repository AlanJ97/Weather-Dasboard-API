version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: us-east-2
    AWS_ACCOUNT_ID: 622233144821
    IMAGE_REPO_NAME_API: dev-weather-api
    IMAGE_REPO_NAME_FRONTEND: dev-weather-frontend
    # Lambda function names for CodeDeploy hooks
    LAMBDA_BEFORE_INSTALL: codedeploy-hook-before_install-dev
    LAMBDA_AFTER_INSTALL: codedeploy-hook-after_install-dev
    LAMBDA_AFTER_ALLOW_TEST_TRAFFIC: codedeploy-hook-after_allow_test_traffic-dev
    LAMBDA_BEFORE_ALLOW_TRAFFIC: codedeploy-hook-before_allow_traffic-dev
    LAMBDA_AFTER_ALLOW_TRAFFIC: codedeploy-hook-after_allow_traffic-dev


phases:
  install:
    runtime-versions:
      python: 3.9
      docker: 20
    commands:
      - echo "Installing build dependencies..."
      - pip install --upgrade pip
      # Install API dependencies (includes testing and code quality tools)
      - pip install -r Weather-dashboard-API/app/api/requirements.txt

  pre_build:
    commands:
      - echo "Pre-build started on $(date)"
      - cd Weather-dashboard-API
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      
      # Get ALB DNS name dynamically
      - 'export ALB_DNS_NAME=$(aws elbv2 describe-load-balancers --region $AWS_DEFAULT_REGION --query "LoadBalancers[?starts_with(LoadBalancerName, \`dev-weather\`)].DNSName" --output text)'
      - 'echo "ALB DNS Name: $ALB_DNS_NAME"'
      
      # Set dynamic image tag using build number
      - 'export IMAGE_TAG="build-$CODEBUILD_BUILD_NUMBER"'
      - 'echo "Using image tag: $IMAGE_TAG"'

      # Code quality checks
      - echo "Running code quality checks..."
      - flake8 app/api/ --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Linting warnings found, continuing build..."
      - flake8 app/frontend/ --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Linting warnings found, continuing build..."

  build:
    commands:
      - echo "Build started on $(date)"
      
      # Run unit tests with coverage reporting and quality gates
      - echo "Running FastAPI unit tests with coverage..."
      - mkdir -p test-reports
      - python -m pytest --cov=app/api app/api/tests --cov-report=xml --cov-report=term-missing --cov-fail-under=80 --junitxml=test-reports/pytest-report.xml --disable-warnings -v
      
      # Build Docker images
      - echo "Building Docker images..."
      - docker system prune -f || true
      
      # Build API image
      - echo "Building API Docker image..."
      - |
        if docker build -t $IMAGE_REPO_NAME_API:$IMAGE_TAG ./app/api; then
          echo "API Docker build succeeded"
          docker tag $IMAGE_REPO_NAME_API:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_API:$IMAGE_TAG
        else
          echo "API Docker build failed"
          exit 1
        fi
      
      # Build Frontend image
      - echo "Building Frontend Docker image..."
      - |
        if docker build -t $IMAGE_REPO_NAME_FRONTEND:$IMAGE_TAG ./app/frontend; then
          echo "Frontend Docker build succeeded"
          docker tag $IMAGE_REPO_NAME_FRONTEND:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_FRONTEND:$IMAGE_TAG
        else
          echo "Frontend Docker build failed"
          exit 1
        fi

  post_build:
    commands:
      - echo "Post-build started on $(date)"
      - echo "Pushing Docker images to ECR..."
      
      # Push Docker images to ECR
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_API:$IMAGE_TAG
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_FRONTEND:$IMAGE_TAG
      
      # Create task definition templates for CodeDeploy
      - echo "Creating task definition templates..."
      - |
        cat > taskdef-api.json << EOF
        {
          "family": "dev-weather-api",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "arn:aws:iam::$AWS_ACCOUNT_ID:role/dev-weather-ecs-task-execution-role",
          "taskRoleArn": "arn:aws:iam::$AWS_ACCOUNT_ID:role/dev-weather-ecs-task-role",
          "containerDefinitions": [
            {
              "name": "weather-api",
              "image": "weather-api",  
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 8000,
                  "protocol": "tcp"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/dev-weather-api",
                  "awslogs-region": "$AWS_DEFAULT_REGION",
                  "awslogs-stream-prefix": "ecs"
                }
              },
              "environment": [
                {
                  "name": "PORT",
                  "value": "8000"
                }
              ]
            }
          ]
        }
        EOF
      
      - |
        cat > taskdef-frontend.json << EOF
        {
          "family": "dev-weather-frontend",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "arn:aws:iam::$AWS_ACCOUNT_ID:role/dev-weather-ecs-task-execution-role",
          "taskRoleArn": "arn:aws:iam::$AWS_ACCOUNT_ID:role/dev-weather-ecs-task-role",
          "containerDefinitions": [
            {
              "name": "weather-frontend",
              "image": "weather-frontend",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 8501,
                  "protocol": "tcp"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/dev-weather-frontend",
                  "awslogs-region": "$AWS_DEFAULT_REGION",
                  "awslogs-stream-prefix": "ecs"
                }
              },
              "environment": [
                {
                  "name": "PORT",
                  "value": "8501"
                },
                {
                  "name": "API_BASE_URL",
                  "value": "http://$ALB_DNS_NAME"
                }
              ]
            }
          ]
        }
        EOF
      
          # ------------------------------------------------------------------
      # Replace image field with the real ECR URI in each task definition
      # ------------------------------------------------------------------
      - echo "Injecting image URIs with jq ..."
      - |
        API_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_API:$IMAGE_TAG"
        FRONT_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_FRONTEND:$IMAGE_TAG"

        # update API task-def
        jq --arg uri "$API_URI" '
            (.containerDefinitions[] | select(.name=="weather-api") ).image = $uri
        ' taskdef-api.json > tmp && mv tmp taskdef-api.json

        # update Frontend task-def
        jq --arg uri "$FRONT_URI" '
            (.containerDefinitions[] | select(.name=="weather-frontend") ).image = $uri
        ' taskdef-frontend.json > tmp && mv tmp taskdef-frontend.json
      # Create AppSpec files for CodeDeploy
      - echo "Creating AppSpec files..."
      - |
        cat > appspec-api.yml << EOF
        version: 0.0
        Resources:
          - TargetService:
              Type: AWS::ECS::Service
              Properties:
                TaskDefinition: "arn:aws:ecs:$AWS_DEFAULT_REGION:$AWS_ACCOUNT_ID:task-definition/dev-weather-api"
                LoadBalancerInfo:
                  ContainerName: "weather-api"
                  ContainerPort: 8000
        Hooks:
          - BeforeInstall: "$LAMBDA_BEFORE_INSTALL"
          - AfterInstall: "$LAMBDA_AFTER_INSTALL"
          - AfterAllowTestTraffic: "$LAMBDA_AFTER_ALLOW_TEST_TRAFFIC"
          - BeforeAllowTraffic: "$LAMBDA_BEFORE_ALLOW_TRAFFIC"
          - AfterAllowTraffic: "$LAMBDA_AFTER_ALLOW_TRAFFIC"
        EOF
      - |
        cat > appspec-frontend.yml << EOF
        version: 0.0
        Resources:
          - TargetService:
              Type: AWS::ECS::Service
              Properties:
                TaskDefinition: "arn:aws:ecs:$AWS_DEFAULT_REGION:$AWS_ACCOUNT_ID:task-definition/dev-weather-frontend"
                LoadBalancerInfo:
                  ContainerName: "weather-frontend"
                  ContainerPort: 8501
        Hooks:
          - BeforeInstall: "$LAMBDA_BEFORE_INSTALL"
          - AfterInstall: "$LAMBDA_AFTER_INSTALL"
          - AfterAllowTestTraffic: "$LAMBDA_AFTER_ALLOW_TEST_TRAFFIC"
          - BeforeAllowTraffic: "$LAMBDA_BEFORE_ALLOW_TRAFFIC"
          - AfterAllowTraffic: "$LAMBDA_AFTER_ALLOW_TRAFFIC"
        EOF
      
      # Create image definitions file with the NEW VERSION TAG (not latest)
      - echo "Creating image definitions file..."
      - |
        echo "[{\"name\":\"weather-api\",\"imageUri\":\"$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_API:$IMAGE_TAG\"},{\"name\":\"weather-frontend\",\"imageUri\":\"$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_FRONTEND:$IMAGE_TAG\"}]" > imagedefinitions.json
      
      # Optional: Tag as latest for convenience
      - docker tag $IMAGE_REPO_NAME_API:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_API:latest || true
      - docker tag $IMAGE_REPO_NAME_FRONTEND:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_FRONTEND:latest || true
      
      - echo "Build completed successfully on $(date)"
      - echo "API Image URI:" $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_API:$IMAGE_TAG
      - echo "Frontend Image URI:" $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_FRONTEND:$IMAGE_TAG
  
cache:
  paths:
   - '/root/.cache/pip/**/*'

reports:
  pytest_reports:
    files:
      - pytest-report.xml
    base-directory: Weather-dashboard-API/test-reports
    file-format: JUNITXML
  coverage_reports:
    files:
      - coverage.xml
    base-directory: Weather-dashboard-API
    file-format: COBERTURAXML

artifacts:
  base-directory: Weather-dashboard-API
  files:
    - imagedefinitions.json
    - taskdef-api.json
    - taskdef-frontend.json
    - appspec-api.yml
    - appspec-frontend.yml
    - coverage.xml
  name: weather-dashboard-artifacts