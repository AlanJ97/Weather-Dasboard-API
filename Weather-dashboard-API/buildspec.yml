version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: us-east-2
    AWS_ACCOUNT_ID: 622233144821
    IMAGE_REPO_NAME_API: dev-weather-api
    IMAGE_REPO_NAME_FRONTEND: dev-weather-frontend
    IMAGE_TAG: latest

phases:
  install:
    runtime-versions:
      python: 3.11
      docker: 20
    commands:
      - echo "Installing build dependencies..."
      - pip install --upgrade pip
      - pip install flake8 black pytest requests

  pre_build:
    commands:
      - echo "Pre-build started on $(date)"
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - echo "Setting up build environment..."
      - cd Weather-dashboard-API
      
      # Code quality checks
      - echo "Running code quality checks..."
      - echo "Linting API code..."
      - flake8 app/api/ --count --select=E9,F63,F7,F82 --show-source --statistics
      - flake8 app/api/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - echo "Linting Frontend code..."
      - flake8 app/frontend/ --count --select=E9,F63,F7,F82 --show-source --statistics
      - flake8 app/frontend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      # Optional: Code formatting check (uncomment if you want strict formatting)
      # - echo "Checking code formatting..."
      # - black --check app/
      
      # Run application tests if available
      - echo "Running application tests..."
      - python app_scripts/test_applications.py || echo "Tests require running services - will validate after deployment"

  build:
    commands:
      - echo "Build started on $(date)"
      - echo "Building Docker images..."
      
      # Build API image
      - echo "Building API Docker image..."
      - docker build -t $IMAGE_REPO_NAME_API:$IMAGE_TAG ./app/api
      - docker tag $IMAGE_REPO_NAME_API:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_API:$IMAGE_TAG
      
      # Build Frontend image
      - echo "Building Frontend Docker image..."
      - docker build -t $IMAGE_REPO_NAME_FRONTEND:$IMAGE_TAG ./app/frontend
      - docker tag $IMAGE_REPO_NAME_FRONTEND:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_FRONTEND:$IMAGE_TAG
      
      # Verify images were built successfully
      - echo "Verifying Docker images..."
      - docker images | grep $IMAGE_REPO_NAME_API
      - docker images | grep $IMAGE_REPO_NAME_FRONTEND

  post_build:
    commands:
      - echo "Post-build started on $(date)"
      - echo "Pushing Docker images to ECR..."
      
      # Push API image
      - echo "Pushing API image..."
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_API:$IMAGE_TAG
      
      # Push Frontend image
      - echo "Pushing Frontend image..."
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_FRONTEND:$IMAGE_TAG
      
      # Create image definitions for ECS deployment
      - echo "Creating image definitions file..."
      - printf '[{"name":"weather-api","imageUri":"%s"},{"name":"weather-frontend","imageUri":"%s"}]' $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_API:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_FRONTEND:$IMAGE_TAG > imagedefinitions.json
      
      # Log successful completion
      - echo "Build completed successfully on $(date)"
      - echo "API Image URI:" $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_API:$IMAGE_TAG
      - echo "Frontend Image URI:" $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_FRONTEND:$IMAGE_TAG

artifacts:
  files:
    - imagedefinitions.json
  name: weather-dashboard-artifacts
  
cache:
  paths:
    - '/root/.cache/pip/**/*'
    - '/var/lib/docker/**/*'
