version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: us-east-2
    AWS_ACCOUNT_ID: 622233144821
    IMAGE_REPO_NAME_API: dev-weather-api
    IMAGE_REPO_NAME_FRONTEND: dev-weather-frontend


phases:
  install:
    runtime-versions:
      python: 3.9
      docker: 20
    commands:
      - echo "Installing build dependencies..."
      - pip install --upgrade pip
      - pip install flake8 black pytest requests

  pre_build:
    commands:
      - echo "Current directory:"
      - pwd
      - echo "Directory contents:"
      - ls -la
      - echo "Changing to Weather-dashboard-API directory..."
      - cd Weather-dashboard-API
      - echo "New directory:"
      - pwd
      - ls -la
      - echo "Pre-build started on $(date)"
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - echo "Setting up build environment..."
      
      # Set dynamic image tag using build number
      - 'export IMAGE_TAG="build-$CODEBUILD_BUILD_NUMBER"'
      - 'echo "Using image tag: $IMAGE_TAG"'

      # Code quality checks
      - echo "Running code quality checks..."
      - echo "Linting API code..."
      - flake8 app/api/ --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Linting warnings found, continuing build..."
      - flake8 app/api/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - echo "Linting Frontend code..."
      - flake8 app/frontend/ --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Linting warnings found, continuing build..."
      - flake8 app/frontend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      # Optional: Code formatting check (uncomment if you want strict formatting)
      # - echo "Checking code formatting..."
      # - black --check app/
      
      # Run application tests if available
      - echo "Running application tests..."
      - python scripts_tests_app/test_applications.py || echo "Tests require running services - will validate after deployment"

  build:
    commands:
      - echo "Build started on $(date)"
      - echo "Cleaning Docker system..."
      - docker system prune -f || true
      - echo "Building Docker images..."
      
      # Build API image
      - echo "Building API Docker image..."
      - |
        if docker build -t $IMAGE_REPO_NAME_API:$IMAGE_TAG ./app/api; then
          echo "API Docker build succeeded"
          docker tag $IMAGE_REPO_NAME_API:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_API:$IMAGE_TAG
        else
          echo "API Docker build failed"
          exit 1
        fi
      
      # Build Frontend image
      - echo "Building Frontend Docker image..."
      - |
        if docker build -t $IMAGE_REPO_NAME_FRONTEND:$IMAGE_TAG ./app/frontend; then
          echo "Frontend Docker build succeeded"
          docker tag $IMAGE_REPO_NAME_FRONTEND:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_FRONTEND:$IMAGE_TAG
        else
          echo "Frontend Docker build failed"
          exit 1
        fi
      
      # Verify images were built successfully
      - echo "Verifying Docker images..."
      - docker images

  post_build:
    commands:
      - echo "Post-build started on $(date)"
      - echo "Pushing Docker images to ECR..."
      
      # Push API image (with dynamic tag like build-123)
      - echo "Pushing API image..."
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_API:$IMAGE_TAG
      
      # Push Frontend image (with dynamic tag like build-123)
      - echo "Pushing Frontend image..."
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_FRONTEND:$IMAGE_TAG
      
      # Create task definition templates for CodeDeploy
      - echo "Creating task definition templates..."
      - |
        cat > taskdef-api.json << EOF
        {
          "family": "dev-weather-api-task",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "arn:aws:iam::$AWS_ACCOUNT_ID:role/dev-weather-dashboard-ecs-task-execution-role",
          "taskRoleArn": "arn:aws:iam::$AWS_ACCOUNT_ID:role/dev-weather-dashboard-ecs-task-role",
          "containerDefinitions": [
            {
              "name": "weather-api",
              "image": "weather-api",  
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 8000,
                  "protocol": "tcp"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/dev-weather-api",
                  "awslogs-region": "$AWS_DEFAULT_REGION",
                  "awslogs-stream-prefix": "ecs"
                }
              },
              "environment": [
                {
                  "name": "PORT",
                  "value": "8000"
                }
              ]
            }
          ]
        }
        EOF
      
      - |
        cat > taskdef-frontend.json << EOF
        {
          "family": "dev-weather-frontend-task",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "arn:aws:iam::$AWS_ACCOUNT_ID:role/dev-weather-dashboard-ecs-task-execution-role",
          "taskRoleArn": "arn:aws:iam::$AWS_ACCOUNT_ID:role/dev-weather-dashboard-ecs-task-role",
          "containerDefinitions": [
            {
              "name": "weather-frontend",
              "image": "weather-frontend",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 8501,
                  "protocol": "tcp"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/dev-weather-frontend",
                  "awslogs-region": "$AWS_DEFAULT_REGION",
                  "awslogs-stream-prefix": "ecs"
                }
              },
              "environment": [
                {
                  "name": "PORT",
                  "value": "8501"
                }
              ]
            }
          ]
        }
        EOF
      
          # ------------------------------------------------------------------
      # Replace image field with the real ECR URI in each task definition
      # ------------------------------------------------------------------
      - echo "Injecting image URIs with jq ..."
      - |
        API_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_API:$IMAGE_TAG"
        FRONT_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_FRONTEND:$IMAGE_TAG"

        # update API task-def
        jq --arg uri "$API_URI" '
            (.containerDefinitions[] | select(.name=="weather-api") ).image = $uri
        ' taskdef-api.json > tmp && mv tmp taskdef-api.json

        # update Frontend task-def
        jq --arg uri "$FRONT_URI" '
            (.containerDefinitions[] | select(.name=="weather-frontend") ).image = $uri
        ' taskdef-frontend.json > tmp && mv tmp taskdef-frontend.json
      # Create AppSpec files for CodeDeploy
      - echo "Creating AppSpec files..."
      - |
        cat > appspec-api.yml << 'EOF'
        version: 0.0
        Resources:
          - TargetService:
              Type: AWS::ECS::Service
              Properties:
                TaskDefinition: <TASK_DEFINITION>
                LoadBalancerInfo:
                  ContainerName: weather-api
                  ContainerPort: 8000
        Hooks:
          - BeforeInstall:
              location: deployment-hooks/before-install.sh
          - AfterInstall:
              location: deployment-hooks/after-install.sh
          - BeforeAllowTraffic:
              location: deployment-hooks/start-server.sh
          - AfterAllowTraffic:
              location: deployment-hooks/stop-server.sh
        EOF
      - |
        cat > appspec-frontend.yml << 'EOF'
        version: 0.0
        Resources:
          - TargetService:
              Type: AWS::ECS::Service
              Properties:
                TaskDefinition: <TASK_DEFINITION>
                LoadBalancerInfo:
                  ContainerName: weather-frontend
                  ContainerPort: 8501
        Hooks:
          - BeforeInstall:
              location: deployment-hooks/before-install.sh
          - AfterInstall:
              location: deployment-hooks/after-install.sh
          - BeforeAllowTraffic:
              location: deployment-hooks/start-server.sh
          - AfterAllowTraffic:
              location: deployment-hooks/stop-server.sh
        EOF
      
      # Create image definitions file with the NEW VERSION TAG (not latest)
      - echo "Creating image definitions file..."
      - |
        echo "[{\"name\":\"weather-api\",\"imageUri\":\"$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_API:$IMAGE_TAG\"},{\"name\":\"weather-frontend\",\"imageUri\":\"$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_FRONTEND:$IMAGE_TAG\"}]" > imagedefinitions.json
      
      # Verify the imagedefinitions.json content
      - echo "Checking imagedefinitions.json content:"
      - cat imagedefinitions.json
      
      # Verify task definition files content
      - echo "Checking taskdef-api.json content:"
      - cat taskdef-api.json
      - echo "Validating taskdef-api.json format:"
      - python -m json.tool taskdef-api.json > /dev/null && echo "taskdef-api.json is valid JSON" || echo "taskdef-api.json has JSON errors"
      - echo "Checking taskdef-frontend.json content:"
      - cat taskdef-frontend.json
      - echo "Validating taskdef-frontend.json format:"
      - python -m json.tool taskdef-frontend.json > /dev/null && echo "taskdef-frontend.json is valid JSON" || echo "taskdef-frontend.json has JSON errors"
      
      # OPTIONAL: Also tag and push as 'latest' for convenience (if your ECR allows mutable tags)
      # This is optional - only if you want a 'latest' tag that always points to newest build
      - echo "Tagging images as latest (optional)..."
      - docker tag $IMAGE_REPO_NAME_API:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_API:latest || true
      - docker tag $IMAGE_REPO_NAME_FRONTEND:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_FRONTEND:latest || true
      # - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_API:latest || true
      # - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_FRONTEND:latest || true
      
      # NOW verify the files exist (AFTER creating them!)
      - echo "Verifying artifact files..."
      - echo "Current working directory:"
      - pwd
      - ls -la imagedefinitions.json
      - ls -la taskdef-api.json
      - ls -la taskdef-frontend.json
      - ls -la appspec-api.yml
      - ls -la appspec-frontend.yml

      
      # Log successful completion
      - echo "Build completed successfully on $(date)"
      - echo "API Image URI:" $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_API:$IMAGE_TAG
      - echo "Frontend Image URI:" $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME_FRONTEND:$IMAGE_TAG
  
cache:
  paths:
   - '/root/.cache/pip/**/*'

artifacts:
  base-directory: Weather-dashboard-API
  files:
    - imagedefinitions.json
    - taskdef-api.json
    - taskdef-frontend.json
    - appspec-api.yml
    - appspec-frontend.yml
  name: weather-dashboard-artifacts